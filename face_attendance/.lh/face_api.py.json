{
    "sourceFile": "face_api.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1686871640285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1686871640285,
            "name": "Commit-0",
            "content": "from flask import Flask, jsonify, request\r\nimport pickle\r\nimport face_recognition\r\nimport time\r\nfrom io import BytesIO\r\nimport base64\r\n\r\n# Initialize the Flask application\r\napp = Flask(__name__)\r\n\r\n# These are the extension that we are accepting to be uploaded\r\napp.config['ALLOWED_EXTENSIONS'] = set(['jpg','jpeg','png'])\r\n\r\n# For a given file, return whether it's an allowed type or not\r\ndef allowed_file(filename):\r\n    return '.' in filename and \\\r\n           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']\r\n\r\n## This function you need to modify as per your need\r\n## Here verifying if face value coming from mobile device is \r\n## matched with our dataset, send that person name back to mobile\r\n## so you can show success message, like - \"XYZ attandance\"\r\n@app.route('/api/facedetect', methods=['GET','POST'])\r\ndef upload_image():\r\n    if request.method == \"GET\":\r\n        resp = jsonify({\"message\":\"Error\", \"data'\":\"Method not allowed\"})\r\n        resp.status_code = 405\r\n        return resp\r\n    else:\r\n        # check if the post request has the files part\r\n        requestData = request.form\r\n        if 'face' not in requestData:\r\n            resp = jsonify({\"message\":\"Error\", \"data'\":\"No face found\"})\r\n            resp.status_code = 500\r\n            return resp\r\n        # Get the list of the uploaded files\r\n        file = BytesIO(base64.decodebytes(requestData[\"face\"].encode()))\r\n        start = time.time()\r\n        results = []\r\n        with open(\"model/trained_knn_model.clf\", 'rb') as f:\r\n            knn_clf = pickle.load(f)\r\n            \r\n            image = face_recognition.load_image_file(file)\r\n            face_location = face_recognition.face_locations(image)\r\n            \r\n            if len(face_location) != 0:\r\n                # Find encodings for faces in the test iamge\r\n                faces_encodings = face_recognition.face_encodings(image, known_face_locations=face_location)\r\n\r\n                # Use the KNN model to find the best matches for the test face\r\n                closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=9)\r\n                are_matches = [closest_distances[0][i][0] <= 0.4 for i in range(len(face_location))]\r\n                predictions = [(pred, loc) if rec else (\"unknown\", loc) for pred, loc, rec in zip(knn_clf.predict(faces_encodings), face_location, are_matches)]\r\n                lp = 0\r\n                for name, (top, right, bottom, left) in predictions:\r\n                    resarray = {}\r\n                    resarray[\"name\"] = name\r\n                    resarray[\"accuracy\"] = closest_distances[0][lp][0]\r\n                    results.append(resarray)\r\n                    lp = lp + 1\r\n\r\n        print(results)\r\n        if(results is None):\r\n            resp = jsonify({\"message\":\"Error\", \"data'\":\"No face found\"})\r\n            resp.status_code = 500\r\n            return resp\r\n        else:\r\n            ## Here based on yoour requirements you can save data.\r\n            ## Like person ID and date of attendance. \r\n            ## It will execute all the time , so manage flag if attendence already done.\r\n            ## This Part Read the face, and if face match , it will send the person name with accuracy value to\r\n            ## android app. \r\n            resp = jsonify({\"message\":\"success\", \"data\": results})\r\n            resp.status_code = 200\r\n            return resp\r\n\r\nif __name__ == '__main__':\r\n    app.run(port=5000, host=\"0.0.0.0\", debug=True, threaded=True, processes=1)"
        }
    ]
}